#ifndef _CPSFIT_MPL_SCRIPT_GENERATE_2D_H_
#define _CPSFIT_MPL_SCRIPT_GENERATE_2D_H_

//Generate python scripts for generating 2D plots using Matplotlib

#include<iostream>
#include<vector>

#include<config.h>
#include<utils/macros.h>
#include<plot/plot/write_python.h>
#include<plot/plot/datasets_2d.h>
#include<plot/plot/MPLscriptgenerate_base.h>

CPSFIT_START_NAMESPACE

//To run the scripts generated by this class, make sure to setup your PYTHONPATH:
//export PYTHONPATH=${SRCDIR}/src:${PYTHONPATH}
//where SRCDIR is the root source directory of this library
class MatPlotLibScriptGenerate: public MatPlotLibScriptGenerateBase{
public:
  typedef MatPlotLibScriptGenerateBase::kwargsType kwargsType;
  typedef std::pair<int,SetType> handleType;
private:
  
  std::vector<PythonDataContainer> plotdata_sets;
  std::vector<kwargsType> plotdata_args;

  std::vector<PythonErrorBandContainer> ploterrorband_sets;
  std::vector<kwargsType> ploterrorband_args;

  std::vector<PythonHistogramContainer> plothistogram_sets;
  std::vector<kwargsType> plothistogram_args;
  
  std::vector<handleType> leg_handles;
  std::vector<std::string> legends;
  std::string leg_py;
public:

  //Data should be an accessor wrapper that has methods
  //double x(const int),
  //double y(const int),
  //double dxm(const int)  [minus-error],
  //double dxp(const int) [plus-error],
  //double dym(const int),
  //double dyp(const int)
  //int size()
  template<typename Data>
  handleType plotData(const Data &data, const kwargsType &kwargs, const std::string &tag = ""){
    plotdata_sets.push_back(PythonDataContainer());   
    if(tag == ""){
      std::ostringstream os; os << "dset" << plotdata_sets.size();
      plotdata_sets.back().import(data, os.str());
    }else{
      plotdata_sets.back().import(data, tag);
    }
    plotdata_args.push_back(kwargs);
    return handleType(plotdata_sets.size()-1, DataSetType);
  }
  template<typename Data>
    inline handleType plotData(const Data &data, const std::string &tag = ""){
    kwargsType kwargs;
    return plotData(data,kwargs,tag);
  }
    
  //Band is an accessor with methods:
  //double x(const int i)
  //double upper(const int i)
  //double lower(const int i)
  //int size()
  template<typename Band>
  handleType errorBand(const Band &band, const kwargsType &kwargs, const std::string &tag = ""){
    ploterrorband_sets.push_back(PythonErrorBandContainer());
    if(tag == ""){
      std::ostringstream os; os << "band" << ploterrorband_sets.size();
      ploterrorband_sets.back().import(band, os.str());
    }else{
      ploterrorband_sets.back().import(band, tag);
    }
    ploterrorband_args.push_back(kwargs);
    return handleType(ploterrorband_sets.size()-1,ErrorBandType);
  }
  template<typename Band>
  inline handleType errorBand(const Band &band, const std::string &tag = ""){
    kwargsType kwargs;
    return errorBand(band,kwargs,tag);
  }


  //Data is an accessors with methods:
  //double y(const int)
  //int size()
  template<typename Data>
  handleType histogram(const Data &data, const kwargsType &kwargs, const std::string &tag = ""){
    plothistogram_sets.push_back(PythonHistogramContainer());
    if(tag == ""){
      std::ostringstream os; os << "histogram" << plothistogram_sets.size();
      plothistogram_sets.back().import(data, os.str());
    }else{
      plothistogram_sets.back().import(data, tag);
    }
    plothistogram_args.push_back(kwargs);
    return handleType(plothistogram_sets.size()-1,HistogramType);
  }
  template<typename Data>
  inline handleType histogram(const Data &data, const std::string &tag = ""){
    kwargsType kwargs;
    return histogram(data,kwargs,tag);
  }

  
  void write(std::ostream &os, const std::string &script_gen_filename = "plot.pdf") const{
    os << "import pyplot\n";
    os << "import matplotlib\n\n";

    for(int i=0;i<plotdata_sets.size();i++)
      plotdata_sets[i].write(os);

    for(int i=0;i<ploterrorband_sets.size();i++)
      ploterrorband_sets[i].write(os);

    for(int i=0;i<plothistogram_sets.size();i++)
      plothistogram_sets[i].write(os);

    os << preamble.str(); //user code
    
    os << "\nif __name__ == '__main__':\n";

    os << "\tfig = pyplot.plt.figure()\n";
    os << "\tax = fig.add_subplot(1,1,1)\n";

    for(int i=0;i<plotdata_sets.size();i++)
      os << "\tplot_" << plotdata_sets[i].tag() << " = " << "pyplot.plotDataSet(ax, " << plotdata_sets[i].tag() << kwargsPrint(plotdata_args[i]) << ")\n";

    for(int i=0;i<ploterrorband_sets.size();i++)
      os << "\tplot_" << ploterrorband_sets[i].tag() << " = " << "pyplot.plotErrorBand(ax, " << ploterrorband_sets[i].tag() << kwargsPrint(ploterrorband_args[i]) << ")\n";    

    for(int i=0;i<plothistogram_sets.size();i++)
      os << "\tplot_" << plothistogram_sets[i].tag() << " = " << "pyplot.plotHistogram(ax, " << plothistogram_sets[i].tag() << kwargsPrint(plothistogram_args[i]) << ")\n";
    
    os << user.str(); //user code
    
    os << leg_py;    
    os << "\tfig.canvas.draw()\n";
    os << "\tfig.savefig(\"" << script_gen_filename << "\")";
  }
  void write(const std::string &filename, const std::string &script_gen_filename = "plot.pdf"){
    std::ofstream of(filename.c_str());
    of.precision(16);
    write(of,script_gen_filename);
    of.close();
  }

  void setLegend(const handleType &handle, const std::string &to){
    leg_handles.push_back(handle);
    legends.push_back(to);    
  }
  inline void createLegend(){
    kwargsType kwargs;
    createLegend(kwargs);
  }
  
  void createLegend(kwargsType kwargs){
    if(legends.size() == 0) return;
    assert(leg_handles.size() == legends.size());
    std::vector<std::string> handles_str;
    
    for(int i=0;i<leg_handles.size();i++){
      int set_idx = leg_handles[i].first;
      if(leg_handles[i].second == ErrorBandType){
	const std::string pyhandle = "plot_" + ploterrorband_sets[set_idx].tag();
	handles_str.push_back(pyhandle);
      }else if(leg_handles[i].second == HistogramType){
	const std::string pyhandle = "plot_" + plothistogram_sets[set_idx].tag() + "[2][0]";
	handles_str.push_back(pyhandle);	
      }else{
	const std::string pyhandle = "plot_" + plotdata_sets[set_idx].tag() + "[0]";
	handles_str.push_back(pyhandle);
      }
    }

    std::ostringstream py;
    py << "\tphandles = " << ListPrint<std::string>(handles_str) << '\n';
    py << "\tplegends = " << ListPrint<std::string>(legends,"\"") << '\n';
    
    if(!kwargs.count("numpoints"))
      kwargs["numpoints"] = 1;
    if(!kwargs.count("shadow"))
      kwargs["shadow"] = true;
    if(!kwargs.count("fancybox"))
      kwargs["fancybox"] = true;

    py << "\tax.legend(phandles,plegends" << kwargsPrint(kwargs) << ")\n";
    leg_py = py.str();
  }
  
  void setXlabel(const std::string &to, const std::string size = "x-large"){
    invoke() << "\tax.set_xlabel(r'" << to << "',size='" << size << "')\n";
  }
  void setYlabel(const std::string &to, const std::string size = "x-large"){
    invoke() << "\tax.set_ylabel(r'" << to << "',size='" << size << "')\n";
  }
  void setXaxisBounds(const double min, const double max){
    invoke() << "\tax.set_xlim(" << min << "," << max << ")\n";
  }
  void setYaxisBounds(const double min, const double max){
    invoke() << "\tax.set_ylim(" << min << "," << max << ")\n";
  }
  void setXaxisMajorTickSpacing(const double val){
    invoke() << "\tax.xaxis.set_major_locator(matplotlib.ticker.MultipleLocator("<<val<<"))" << std::endl;
  }
  void setYaxisMajorTickSpacing(const double val){
    invoke() << "\tax.yaxis.set_major_locator(matplotlib.ticker.MultipleLocator("<<val<<"))" << std::endl;
  }
  void setXaxisMinorTickSpacing(const double val){
    invoke() << "\tax.xaxis.set_minor_locator(matplotlib.ticker.MultipleLocator("<<val<<"))" << std::endl;
  }
  void setYaxisMinorTickSpacing(const double val){
    invoke() << "\tax.yaxis.set_minor_locator(matplotlib.ticker.MultipleLocator("<<val<<"))" << std::endl;
  }


};

CPSFIT_END_NAMESPACE
#endif
